{
  "admin": "admin",
  "searchPlaceholder": "Search organization, application, gateway or device",
  "activeGateways": "Active Gateways",
  "gateways": "Gateways",
  "activeDevices": "Active Devices",
  "dashboard": "Dashboard",
  "deviceDataRateUsage": "Device data-rate usage",
  "networkServers": "Network-servers",
  "networkServer": "Network-server",
  "selectNetworkServer": "Select network-server",
  "gatewayProfiles": "Gateway-profiles",
  "organizations": "Organizations",
  "organization": "Organization",
  "allUsers": "All users",
  "apiKeys": "API keys",
  "orgDashboard": "Org. dashboard",
  "orgUsers": "Org. users",
  "orgApiKeys": "Org. API keys",
  "serviceProfiles": "Service-profiles",
  "deviceProfiles": "Device-profiles",
  "applications": "Applications",
  "add": "Add",
  "addSubmit": "Add network-server",
  "dismiss": "Dismiss",
  "name": "Name",
  "value": "Value",
  "server": "Server",
  "general": "General",
  "gatewayDiscovery": "Gateway discovery",
  "tlsCertificates": "TLS certificates",
  "networkServerName": "Network-server name",
  "networkServerServer": "Network-server server",
  "hostNameHelper": "A name to identify the network-server.",
  "hostPortHelper": "The hostname:port of the network-server (e.g. localhost:8000)",
  "enableGatewayDiscovery": "Enable gateway discovery",
  "enableGatewayDiscoveryHelper": "Enable the gateway discovery feature for this network-server.",
  "intervalPerDay": "Interval (per day)",
  "intervalHelper": "The number of gateway discovery 'pings' per day that ChirpStack Application Server will broadcast through each gateway.",
  "txFrequency": "TX frequency (Hz)",
  "frequencyHelper": "The frequency (Hz) used for transmitting the gateway discovery 'pings'. Please consult the LoRaWAN Regional Parameters specification for the channels valid for each region.",
  "txDataRate": "TX data-rate",
  "dataRateHelper": "The data-rate used for transmitting the gateway discovery 'pings'. Please consult the LoRaWAN Regional Parameters specification for the data-rates valid for each region.",
  "appServerCerts": "Certificates for ChirpStack Application Server to ChirpStack Network Server connection",
  "netServerCerts": "Certificates for ChirpStack Network Server to ChirpStack Application Server connection",
  "caCertificate": "CA certificate",
  "caHelper": "Paste the content of the CA certificate (PEM) file in the above textbox. Leave blank to disable TLS.",
  "tlsCertificate": "TLS certificate",
  "tlsHelper": "Paste the content of the TLS certificate (PEM) file in the above textbox. Leave blank to disable TLS.",
  "tlsKey": "TLS key",
  "tlsKeyHelper": "Paste the content of the TLS key (PEM) file in the above textbox. Leave blank to disable TLS. Note: for security reasons, the TLS key can't be retrieved after being submitted (the field is left blank). When re-submitting the form with an empty TLS key field (but populated TLS certificate field), the key won't be overwritten.",
  "delete": "Delete",
  "clickToCopy": "Click to copy",
  "hexString": "Hex string",
  "hexArray": "Hex array",
  "toggleByteOrder": "Toggle the byte order of the input. Some devices use LSB.",
  "generateRandomKey": "Generate random key.",
  "generateRandomDeviceAddress": "Generate random device address.",
  "generateRandomID": "Generate random ID.",
  "addNetServerQ": "Add a network-server?",
  "addNetServerHelperInfo": "ChirpStack Application Server isn't connected to a ChirpStack Network Server network-server. Did you know that ChirpStack Application Server can connect to multiple ChirpStack Network Server instances, e.g. to support multiple regions?",
  "wouldYouLikeToConnectQ": "Would you like to connect to a network-server now?",
  "addServiceProfileQ": "Add a service-profile?",
  "addServiceProfileHelperInfo": "The selected organization does not have a service-profile yet. A service-profile connects an organization to a network-server and defines the features that an organization can use on this network-server.",
  "wouldYouLikeToCreateServiceProfileQ": "Would you like to create a service-profile?",
  "createServiceProfile": "Create service-profile",
  "addDeviceProfileQ": "Add a service-profile?",
  "updateDeviceProfile": "Update device-profile",
  "addDeviceProfileHelperInfo": "The selected organization does not have a device-profile yet. A device-profile defines the capabilities and boot parameters of a device. You can create multiple device-profiles for different kind of devices.",
  "wouldYouLikeToCreateDeviceProfileQ": "Would you like to create a device-profile?",
  "createDeviceProfile": "Create device-profile",
  "apiKeyName": "API key name",
  "apiKeyID": "API key ID",
  "token": "Token",
  "tokenHelper": "Use this token when making API request with this API key. This token is provided once.",
  "apiKeyNameHelper": "A descriptive name for the API key",
  "globalApiKeys": "Global API keys",
  "create": "Create",
  "createApiKey": "Create API key",
  "apiKeyDeleteConfirmation": "Are you sure you want to delete this api key?",
  "deviceProfileDeleteConfirmation": "Are you sure you want to delete this device-profile?",
  "noDataAvailable": "No data available.",
  "neverSeen": "Never seen",
  "neverSeenOnline": "Never seen online",
  "inactive": "Inactive",
  "active": "Active",
  "every": "every",
  "second": "second",
  "2seconds": "2 seconds",
  "4seconds": "4 seconds",
  "8seconds": "8 seconds",
  "16seconds": "16 seconds",
  "32seconds": "32 seconds",
  "64seconds": "64 seconds",
  "128seconds": "128 seconds",
  "cayenneLPP": "Cayenne LPP",
  "customJS": "Custom JavaScript codec functions",
  "joinOTAAABP": "Join (OTAA / ABP)",
  "classB": "Class-B",
  "classC": "Class-C",
  "codec": "Codec",
  "tags": "Tags",
  "deviceProfileName": "Device-profile name",
  "deviceProfileNameHelper": "A name to identify the device-profile.",
  "deviceProfileNetworkServerHelper": "The network-server on which this device-profile will be provisioned. After creating the device-profile, this value can't be changed.",
  "version": "version",
  "lorawanMACVersionSupported": "The LoRaWAN MAC version supported by the device.",
  "lorawanRegParamsRevision": "LoRaWAN Regional Parameters revision",
  "selectLorawanRegParamsRevision": "Select LoRaWAN Regional Parameters revision",
  "revisionSupported": "Revision of the Regional Parameters specification supported by the device.",
  "adrAlgo": "ADR algorithm",
  "selectAdrAlgo": "Select ADR algorithm",
  "adrAlgoHelper": "The ADR algorithm that will be used for controlling the device data-rate.",
  "maxEIRP": "Max EIRP",
  "maxEIRPHelper": "Maximum EIRP supported by the device.",
  "uplinkInterval": "Uplink interval",
  "uplinkIntervalHelper": "The expected interval in seconds in which the device sends uplink messages. This is used to determine if a device is active or inactive.",
  "seconds": "seconds",
  "deviceSupportsOTAA": "Device supports OTAA",
  "delay": "delay",
  "rx1DelayHelper": "RX1 delay (valid values are 0 - 15).",
  "dataRateOffest": "data-rate offset",
  "regParamsHelper": "Please refer the LoRaWAN Regional Parameters specification for valid values.",
  "dataRate": "data-rate",
  "hz": "Hz",
  "channelFrequency": "channel frequency",
  "factoryPresetFrequencies": "Factory-preset frequencies",
  "factoryPresetFreqHelper": "List of factory-preset frequencies (Hz), comma separated.",
  "deviceSupportsClassB": "Device supports Class-B",
  "confirmedDownlinkTimeout": "confirmed downlink timeout",
  "confirmedDownlinkTimeoutHelper": "timeout (in seconds) for confirmed downlink transmissions.",
  "periodicity": "periodicity",
  "pingSlotPeriodicity": "ping-slot periodicity",
  "pingSlotDataRate": "ping-slot data-rate",
  "pingSlotFrequency": "ping-slot frequency",
  "selectClassBPingSlotPeriodicity": "Select Class-B ping-slot periodicity",
  "deviceSupportsClassC": "Device supports Class-C",
  "deviceSupportsClassCHelper": "Select this option when the device will operate as Class-C device immediately after activation. In case it sends a DeviceModeInd mac-command when it changes to Class-C, do not select this option.",
  "payloadCodec": "Payload codec",
  "selectPayloadCodec": "Select payload codec",
  "payloadCodecHelper": "By defining a payload codec, ChirpStack Application Server can encode and decode the binary device payload for you.",
  "tagsHelper": "Tags can be used to store additional key/value data.",
  "addTag": "Add tag",
  "fMustHave": "The function must have the signature",
  "decodeMustReturn": "and must return an object. ChirpStack Application Server will convert this object to JSON.",
  "encodeMustReturn": "and must return an array of bytes.",
  "CreateDeviceJS": {
    "question": "Add a device-profile?",
    "helper": "The selected application does not have access to any device-profiles. A device-profile defines the capabilities and boot parameters of a device. You can create multiple device-profiles for different kind of devices.",
    "submitQuestion": "Would you like to create a device-profile?",
    "applications": "Applications",
    "devices:": "Devices",
    "create": "Create",
    "createDeviceProfile": "Create device-profile",
    "submitLabel": "Create device",
    "dismiss": "Dismiss"
  },
  "DeviceActivationJS": {
    "devAddrLabel": "Device address",
    "devAddrHelper": "While any device address can be entered, please note that a LoRaWAN compliant device address consists of an AddrPrefix (derived from the NetID) + NwkAddr.",
    "nwkSEncKey10Label": "Network session key (LoRaWAN 1.0)",
    "appSKey10Label": "Application session key (LoRaWAN 1.0)",
    "fCntUp10Label": "Uplink frame-counter",
    "nFCntDown10Label": "Downlink frame-counter (network)",
    "nwkSEncKey11Label": "Network session encryption key",
    "sNwkSIntKey11Label": "Serving network session integrity key",
    "fNwkSIntKey11Label": "Forwarding network session integrity key",
    "appSKey11Label": "Application session key",
    "fCntUp11Label": "Uplink frame-counter",
    "nFCntDown11Label": "Downlink frame-counter (network)",
    "aFCntDown11Label": "Downlink frame-counter (application)",
    "clearConfirmation": "Are you sure you want to clear this device devNonce?",
    "reactivateSubmitLabel": "(Re)activate device",
    "clearDevNonce": "Clear DevNonce",
    "aboutDevNonceClear": "About DevNonce Clear",
    "aboutText": "These are clear older DevNonce records from device activation records in Network Server.",
    "note": "Note",
    "note1": "The network server keeps track of a certain number of DevNonce values used by the end device in the past and ignores join requests with any of these DevNonce values from that end-device.",
    "note2": "sing this method we can clear older or already generated device activation records from the database to prevent the 'DevNonce already exists' error in the OTAA method.",
    "note3": "This clears all DevNonce records but keeps the latest 20 records to maintain device activation status.",
    "deleteConfirmation": "Are you sure you want to delete this device devNonce (older Activation records from Network Server)?",
    "yes": "YES",
    "no": "NO",
    "notActivatedMessage": "This device has not (yet) been activated."
  },
  "DeviceDataJS": {
    "confirmed": "Confirmed",
    "unconfirmed": "Unconfirmed",
    "FCnt": "FCnt",
    "FPort": "FPort",
    "devAddr": "DevAddr",
    "margin": "Margin",
    "Ack": "Ack",
    "MHz": "MHz",
    "GW": "GW",
    "help": "Help",
    "helpText": "These are the events as published to the application (using the JSON marshaler). Please refer to data integrations (documentation) for more information on integrating this with your application.\n ID values are converted from base64 to HEX for your convenience.",
    "close": "Close",
    "pause": "Pause",
    "resume": "Resume",
    "download": "Download",
    "clear": "Clear",
    "notConnectedToWS": "Not connected to Websocket API"
  },
  "DeviceDetailsJS": {
    "name": "Name",
    "description": "Description",
    "details": "Details",
    "deviceProfile": "Device-profile",
    "multicastGroups": "Multicast groups",
    "status": "Status",
    "lastSeenAt": "Last seen at",
    "state": "State",
    "enqueueDownlinkPayload": "Enqueue downlink payload",
    "enqueuePayload": "Enqueue payload",
    "disabled": "disabled",
    "enabled": "enabled",
    "flushConfirmation": "Are you sure you want to flush the device queue?",
    "downlinkQueue": "Downlink queue",
    "FCnt": "FCnt",
    "FPort": "FPort",
    "confirmed": "confirmed",
    "unconfirmed": "unconfirmed",
    "yes": "yes",
    "no": "no",
    "Confirmed": "Confirmed",
    "base64EncodedPayload": "Base64 encoded payload",
    "uplink": "uplink",
    "rssi": "rssi (reported by gateways)",
    "snr": "snr (reported by gateways)",
    "received": "Received",
    "errors": "Errors",
    "SNR": "SNR",
    "RSSI": "RSSI",
    "frequency": "frequency",
    "DR": "DR"
  },
  "DeviceFormJS": {
    "General": "General",
    "Variables": "Variables",
    "Tags": "Tags",
    "DeviceName": "Device name",
    "DeviceNameHelper": "The name may only contain words, numbers and dashes.",
    "DeviceDescription": "Device description",
    "DeviceEUI": "Device EUI",
    "DeviceProfile": "Device-profile",
    "DisableFrameCounterValidation": "Disable frame-counter validation",
    "Note": "Note that disabling the frame-counter validation will compromise security as it enables people to perform replay-attacks.",
    "DeviceIsDisabled": "Device is disabled",
    "FormHelper": "ChirpStack Network Server will ignore received uplink frames and join-requests from disabled devices.",
    "VariablesInfo": "Variables can be used to substitute placeholders in for example integrations, e.g. in case an integration requires the configuration of a device specific token.",
    "AddVariable": "Add variable",
    "TagsInfo": "Tags can be used as device filters and are exposed on events as additional meta-data for aggregation.",
    "AddTag": "Add tag"
  },
  "DeviceFrameJS": {
    "Help": "Help",
    "HelpText": "The frames below are the raw (and encrypted) LoRaWAN PHYPayload frames as seen by the gateway(s). This data is intedend for debugging only.",
    "Close": "Close",
    "Pause": "Pause",
    "Resume": "Resume",
    "Download": "Download",
    "Clear": "Clear",
    "NotConnectedToWS": "Not connected to Websocket API"
  },
  "DeviceKeysJS": {
    "nwkKey11Label": "Network key (LoRaWAN 1.1)",
    "nwkKey11Helper": "For LoRaWAN 1.1 devices. In case your device does not support LoRaWAN 1.1, update the device-profile first.",
    "appKey11Label": "Application key (LoRaWAN 1.1)",
    "appKey11Helper": "For LoRaWAN 1.1 devices. In case your device does not support LoRaWAN 1.1, update the device-profile first.",
    "nwkKey10Label": "Application key",
    "nwkKey10Helper": "For LoRaWAN 1.0 devices. In case your device supports LoRaWAN 1.1, update the device-profile first.",
    "SetDeviceKeys": "Set device-keys"
  },
  "DeviceLayoutJS": {
    "DeleteConfirmation": "Are you sure you want to delete this device?",
    "Delete": "Delete",
    "Details": "Details",
    "Configuration": "Configuration",
    "KeysOTAA": "Keys (OTAA)",
    "Activation": "Activation",
    "DeviceData": "Device data",
    "LoRaWANFrames": "LoRaWAN Frames"
  },
  "DeviceQueueItemFormJS": {
    "Port": "Port",
    "PortHelper": "Please note that the fPort value must be > 0.",
    "ConfirmedDownlink": "Confirmed downlink",
    "Base64Encoded": "Base64 encoded",
    "JSONObject": "JSON object",
    "Base64EncodedString": "Base64 encoded string",
    "FormHelper": "The device must be configured with a Device Profile supporting a Codec which is able to encode the given (JSON) payload."
  },
  "ListDevicesJS": {
    "DialogTitle": "Add devices to multicast-group",
    "DialogContentText": "Select the multicast-group to which the devices must be added:",
    "Cancel": "Cancel",
    "Add": "Add",
    "Create": "Create",
    "SelectedDevices": "Selected devices",
    "AddToMulticastGroup": "Add to multicast group",
    "LastSeen": "Last seen",
    "DeviceName": "Device name",
    "DeviceEUI": "Device EUI",
    "DeviceProfile": "Device profile",
    "LinkMargin": "Link margin",
    "Battery": "Battery"
  },
  "UpdateDeviceJS": {
    "UpdateDevice": "Update device"
  },
  "CreateGatewayProfileJS": {
    "DialogTitle": "Add a network-server?",
    "DialogContentText1": "ChirpStack Application Server isn't connected to a ChirpStack Network Server network-server. Did you know that ChirpStack Application Server can connect to multiple ChirpStack Network Server instances, e.g. to support multiple regions?",
    "DialogContentText2": "Would you like to connect to a network-server now?",
    "DialogActionSubmit": "Add network-server",
    "Dismiss": "Dismiss",
    "GatewayProfiles": "Gateway-profiles",
    "Create": "Create",
    "CreateGatewayProfile": "Create gateway-profile"
  },
  "GatewayProfileFormJS": {
    "ExtraChannel": "Extra channel",
    "delete": "delete",
    "Modulation": "Modulation",
    "LoRa": "LoRa",
    "FSK": "FSK",
    "bandwidth": "bandwidth",
    "kHz": "kHz",
    "Hz": "Hz",
    "Frequency": "Frequency",
    "SpreadingFactors": "Spreading-factors",
    "SpreadingFactorsHelper": "When defining multiple spreading-factors, the channel will be configured as a multi-SF channel on the gateway.",
    "Bitrate": "Bitrate",
    "Name": "Name",
    "NameHelper": "A short name identifying the gateway-profile.",
    "StatsInterval": "Stats interval",
    "StatsIntervalHelper": "The stats interval in which the gateway reports its statistics. The recommended value is 30 seconds.",
    "seconds": "seconds",
    "EnabledChannels": "Enabled channels",
    "EnabledChannelsHelper": "The channels active in this gateway-profile as specified in the LoRaWAN Regional Parameters specification. Separate channels by comma, e.g. 0, 1, 2. Extra channels must not be included in this list.",
    "NetworkServer": "Network-server",
    "SelectNetworkServer": "Select network-server"
  },
  "GatewayProfileLayoutJS": {
    "DeleteGatewayProfileConfirmation": "Are you sure you want to delete this gateway-profile?",
    "Delete": "Delete",
    "GatewayProfiles": "Gateway-profiles"
  },
  "ListGatewayProfilesJS": {
    "HelpTitle": "Gateway Profile Help",
    "HelpDescription": "The only purpose of a Gateway Profile is to (re)configure one or multiple gateways with the configuration properties that are set by the Gateway Profile. \n\n When the ChirpStack Network Server detects that the configuration of a gateway is out-of-sync with its Gateway Profile, it will push a configuration command to the gateway in order to update its configuration. \n\n Please note that this feature is optional and only works in combination with the ChirpStack Concentratord component. \n\n Also note that the Gateway Profile does not change the way how devices are behaving. To configure the channel-plan that must be used by devices, update the ChirpStack Network Server configuration.",
    "Close": "Close",
    "Create": "Create",
    "Help": "Help",
    "GatewayProfiles": "Gateway-profiles",
    "Name": "Name",
    "NetworkServer": "Network-server"
  },
  "UpdateGatewayProfileJS": {
    "UpdateGatewayProfile": "Update gateway-profile"
  },
  "CreateGatewayJS": {
    "DialogTitle": "Add a service-profile?",
    "DialogContentText1": "The selected organization does not have a service-profile yet. A service-profile connects an organization to a network-server and defines the features that an organization can use on this network-server.",
    "DialogContentText2": "Would you like to create a service-profile?",
    "CreateServiceProfile": "Create service-profile",
    "Dismiss": "Dismiss",
    "Gateways": "Gateways",
    "Create": "Create",
    "CreateGateway": "Create gateway"
  },
  "GatewayCertificateJS": {
    "Info": "If required by the network, the gateway needs a client certificate in order to connect to the network. This certificate must be configured on the gateway. After generating the certificate, the certificate can only be retrieved once.",
    "GenerateCertificate": "Generate certificate",
    "expiresAtLabel": "Certificate expires at",
    "expiresAtHelper": "The certificate expires at this date. Make sure to generate and configure a new certificate for your gateway before this expiration date.",
    "caCertLabel": "CA certificate",
    "caCertHelper": "The CA certificate is to authenticate the certificate of the server. Store this as a text-file on your gateway, e.g. named 'ca.pem'.",
    "tlsCertLabel": "TLS certificate",
    "tlsCertHelper": "Store this as a text-file on your gateway, e.g. named 'cert.pem'",
    "tlkKeyLabel": "TLS key",
    "tlsKeyHelper": "Store this as a text-file on your gateway, e.g. named 'key.pem'"
  },
  "GatewayDetailsJS": {
    "GatewayDetails": "Gateway details",
    "GatewayID": "Gateway ID",
    "Altitude": "Altitude",
    "meters": "meters",
    "GPSCoordinates": "GPS coordinates",
    "LastSeenAt": "Last seen at",
    "rxReceived": "rx received",
    "txEmitted": "tx emitted",
    "Received": "Received",
    "Transmitted": "Transmitted",
    "frequency": "frequency",
    "DR": "DR",
    "Transmission": "Transmission",
    "AckStatus": "Ack status"
  },
  "GatewayDiscoveryJS": {
    "NoDiscovered": "No gateway discovery data is available (yet). This could mean:",
    "NoPing": "no discovery 'ping' was emitted yet",
    "DisabledPingFeature": "the gateway ping feature has been disabled in ChirpStack Application Server",
    "PingNotReceived": "the discovery 'ping' was not received by any other gateways",
    "Freq": "Freq",
    "DR": "DR",
    "Altitude": "Altitude",
    "MHz": "MHz",
    "meters": "meter(s)",
    "RSSI": "RSSI",
    "SNR": "SNR",
    "dBm": "dBm",
    "dB": "dB"
  },
  "GatewayFormJS": {
    "Board": "Board",
    "configuration": "configuration",
    "delete": "delete",
    "fpgaIDLabel": "FPGA ID",
    "fgpaIDHelper": "The FPGA ID of the geoloc concentrator board. This is only available for v2 gateways with geolocation capabilities. (optional)",
    "fineTimestampKeyLabel": "Fine-timestamp decryption key",
    "fineTimestampKeyHelper": "The fine-timestamp AES decryption key. When set, ChirpStack Network Server will decrypt the fine-timestamp. This is only available for v2 gateways with geolocation capabilities. (optional)",
    "AddBoardConfiguration": "Add board configuration",
    "General": "General",
    "Tags": "Tags",
    "Metadata": "Metadata",
    "nameLabel": "Gateway name",
    "nameHelper": "The name may only contain words, numbers and dashes.",
    "descriptionLabel": "Gateway description",
    "GatewayID": "Gateway ID",
    "NetworkServer": "Network-server",
    "SelectNetworkServer": "Select network-server",
    "SelectNetworkServerInfo": "Select the network-server to which the gateway will connect. When no network-servers are available in the dropdown, make sure a service-profile exists for this organization.",
    "ServiceProfile": "Service-profile",
    "SelectServiceProfile": "Select service-profile",
    "SelectServiceProfileInfo": "Select the service-profile under which the gateway must be added. The available service-profiles depend on the selected network-server, which must be selected first.",
    "GatewayProfile": "Gateway-profile",
    "SelectGatewayProfile": "Select gateway-profile",
    "SelectGatewayProfileInfo": "  Optional. When assigning a gateway-profile to the gateway, ChirpStack Network Server will attempt to update the gateway according to the gateway-profile. Note that this does require a gateway with ChirpStack Concentratord.",
    "GatewayDiscoveryEnabled": "Gateway discovery enabled",
    "GatewayDiscoveryEnabledInfo": "When enabled (and ChirpStack Network Server is configured with the gateway discover feature enabled), the gateway will send out periodical pings to test its coverage by other gateways in the same network.",
    "GatewayAltitude": "Gateway altitude",
    "GatewayAltitudeHelper": "When the gateway has an on-board GPS, this value will be set automatically when the network has received statistics from the gateway.",
    "meters": "meters",
    "GatewayLocation": "Gateway location",
    "setToCurrentLocation": "set to current location",
    "GatewayLocationInfo": "Drag the marker to the location of the gateway. When the gateway has an on-board GPS, this value will be set automatically when the network receives statistics from the gateway.",
    "TagsInfo": "Tags can be used to store additional key/value data.",
    "AddTag": "Add tag",
    "MetadataInfo": "Metadata can be used by the ChirpStack Gateway Bridge to push information about the gateway (e.g. ip / hostname, serial number, temperatures, ...). This information is automatically updated when gateway statistics are received."
  },
  "GatewayFramesJS": {
    "DialogTitle": "Help",
    "DialogContentText": "The frames below are the raw (and encrypted) LoRaWAN PHYPayload frames as seen by the gateway(s). This data is intended for debugging only.",
    "Close": "Close",
    "Help": "Help",
    "Pause": "Pause",
    "Resume": "Resume",
    "Download": "Download",
    "Clear": "Clear",
    "NotConnectedToWS": "Not connected to Websocket API"
  },
  "GatewayLayoutJS": {
    "DeleteGatewayConfirmation": "Are you sure you want to delete this gateway?",
    "Delete": "Delete",
    "GatewayDetails": "Gateway details",
    "GatewayConfiguration": "Gateway configuration",
    "Certificate": "Certificate",
    "GatewayDiscovery": "Gateway discovery",
    "LiveLoRaWANFrames": "Live LoRaWAN frames"
  },
  "ListGatewaysJS": {
    "Create": "Create",
    "Gateways": "Gateways",
    "LastSeen": "Last seen",
    "Name": "Name",
    "GatewayID": "Gateway ID",
    "NetworkServer": "Network server",
    "GatewayActivity": "Gateway activity",
    "30d": "30d"
  },
  "UpdateGatewayJS": {
    "UpdateGateway": "Update gateway"
  },
  "CreateMulticastGroupJS": {
    "Applications": "Applications",
    "MulticastGroups": "Multicast groups",
    "Create": "Create",
    "CreateMulticastGroup": "Create multicast-group"
  },
  "ListMulticastGroupDevicesJS": {
    "RemoveConfirmation": "Are you sure you want to remove the selected devices from the multicast-group?",
    "RemoveFromGroup": "Remove from group",
    "DeviceName": "Device name",
    "DeviceEUI": "Device EUI"
  },
  "ListMulticastGroupsJS": {
    "Create": "Create",
    "Name": "Name",
    "ID": "ID"
  },
  "MulticastGroupFormJS": {
    "ClassB": "Class-B",
    "ClassC": "Class-C",
    "every": "every",
    "second": "second",
    "2seconds": "2 seconds",
    "4seconds": "4 seconds",
    "8seconds": "8 seconds",
    "16seconds": "16 seconds",
    "32seconds": "32 seconds",
    "64seconds": "64 seconds",
    "128seconds": "128 seconds",
    "nameLabel": "Multicast-group name",
    "nameHelper": "The name of the multicast-group",
    "mcAddrLabel": "Multicast address",
    "mcNwkSKeyLabel": "Multicast network session key",
    "mcAppSKeyLabel": "Multicast application session key",
    "fCntLabel": "Frame-counter",
    "drLabel": "Data-rate",
    "drHelper": "The data-rate to use when transmitting the multicast frames. Please refer to the LoRaWAN Regional Parameters specification for valid values.",
    "frequencyLabel": "Frequency",
    "frequencyHelper": "The frequency to use when transmitting the multicast frames. Please refer to the LoRaWAN Regional Parameters specification for valid values.",
    "MultiCastGroupType": "Multicast-group type",
    "SelectMulticastGroupType": "Select multicast-group type",
    "MulticastGroupTypeInfo": "The multicast-group type defines the way how multicast frames are scheduled by the network-server.",
    "PingSlotPeriodicity": "ping-slot periodicity",
    "selectClassBPingSlotPeriodicity": "Select Class-B ping-slot periodicity",
    "Hz": "Hz"
  },
  "MulticastGroupLayoutJS": {
    "DeleteConfirmation": "Are you sure you want to delete this multicast-group?",
    "Delete": "Delete",
    "Applications": "Applications",
    "MulticastGroups": "Multicast groups",
    "Devices": "Devices",
    "Configuration": "Configuration"
  },
  "UpdateMulticastGroupJS": {
    "UpdateMulticastGroup": "Update multicast-group"
  },
  "UpdateNetworkServerJS": {
    "UpdateNetworkServer": "Update network-server"
  },
  "SearchJS": {
    "application": "application",
    "organization": "organization",
    "device": "device",
    "gateway": "gateway",
    "Search": "Search",
    "Kind": "Kind",
    "Name": "Name",
    "ID": "ID"
  },
  "CreateServiceProfileJS": {
    "DialogTitle": "Add a network-server?",
    "DialogContentText1": "hirpStack Application Server isn't connected to a ChirpStack Network Server network-server. Did you know that ChirpStack Application Server can connect to multiple ChirpStack Network Server instances, e.g. to support multiple regions?",
    "DialogContentText2": "Would you like to connect to a network-server now?",
    "AddNetworkServer": "Add network-server",
    "Dismiss": "Dismiss",
    "ServiceProfiles": "Service-profiles",
    "Create": "Create",
    "CreateServiceProfile": "Create service-profile"
  },
  "ListServiceProfilesJS": {
    "Create": "Create",
    "ServiceProfiles": "Service-profiles",
    "Name": "Name",
    "ID": "ID",
    "NetworkServer": "Network Server"
  },
  "ServiceProfileFormJS": {
    "nameLabel": "Service-profile name",
    "nameHelper": "A name to identify the service-profile.",
    "networkServerIDLabel": "Network-server",
    "networkServerIDHelper": "The network-server on which this service-profile will be provisioned. After creating the service-profile, this value can't be changed.",
    "AddGatewayMetadata": "Add gateway meta-data",
    "MetadataHelper": "GW metadata (RSSI, SNR, GW geoloc., etc.) are added to the packet sent to the application-server.",
    "EnableNetworkGeolocation": "Enable network geolocation",
    "NetworkGeolocationHelper": "When enabled, the network-server will try to resolve the location of the devices under this service-profile. Please note that you need to have gateways supporting the fine-timestamp feature and that the network-server needs to be configured in order to provide geolocation support.",
    "devStatusReqFreqLabel": "Device-status request frequency",
    "devStatusReqFreqHelper": "Frequency to initiate an End-Device status request (request/day). Set to 0 to disable.",
    "ReportBatteryLevel": "Report device battery level to application-server",
    "ReportLinkMargin": "Report device link margin to application-server",
    "drMinLabel": "Minimum allowed data-rate",
    "drMinHelper": "Minimum allowed data rate. Used for ADR.",
    "drMaxLabel": "Maximum allowed data-rate",
    "drMaxHelper": "Maximum allowed data rate. Used for ADR.",
    "PrivateGateways": "Private gateways",
    "PrivateGatewaysHelper": "Gateways under this service-profile are private. This means that these gateways can only be used by devices under the same service-profile."
  },
  "ServiceProfileLayoutJS": {
    "DeleteConfirmation": "Are you sure you want to delete this service-profile?",
    "Delete": "Delete",
    "ServiceProfiles": "Service-profiles"
  },
  "UpdateServiceProfileJS": {
    "UpdateServiceProfile": "Update service-profile"
  },
  "ChangeUserPasswordJS": {
    "Password": "Password",
    "Users": "Users",
    "ChangePassword": "Change password",
    "UpdatePassword": "Update password"
  },
  "CreateUserJS": {
    "Users": "Users",
    "Create": "Create",
    "CreateUser": "Create user"
  },
  "ListUsersJS": {
    "Users": "Users",
    "Create": "Create",
    "Email": "Email",
    "Active": "Active",
    "Admin": "Admin"
  },
  "LoginJS": {
    "Username": "Username",
    "email": "email",
    "Password": "Password",
    "ChirpStackLogin": "ChirpStack Login",
    "Login": "Login"
  },
  "UpdateUserJS": {
    "UpdateUser": "Update user"
  },
  "UserFormJS": {
    "Email": "E-mail address",
    "noteLabel": "Optional note",
    "noteHelper": "Optional note, e.g. a phone number, address, comment...",
    "Password": "Password",
    "Permissions": "Permissions",
    "IsActive": "Is active",
    "IsGlobalAdmin": "Is global admin"
  },
  "UserLayoutJS": {
    "DeleteConfirmation": "Are you sure you want to delete this user?",
    "ChangePassword": "Change password",
    "Delete": "Delete",
    "Users": "Users"
  },
  "CreateOrganizationJS": {
    "Organizations": "Organizations",
    "Create": "Create",
    "CreateOrganization": "Create organization"
  },
  "CreateOrganizationUserJS": {
    "OrganizationUsers": "Organization users",
    "Add": "Add",
    "AddUser": "Add user"
  },
  "ListOrganizationsJS": {
    "Create": "Create",
    "Organizations": "Organizations",
    "Name": "Name",
    "DisplayName": "Display name",
    "CanHaveGateways": "Can have gateways"
  },
  "ListOrganizationUsersJS": {
    "Add": "Add",
    "OrganizationUsers": "Organization users",
    "Email": "Email",
    "OrganizationAdmin": "Organization admin",
    "GatewayAdmin": "Gateway admin",
    "DeviceAdmin": "Device admin"
  },
  "OrganizationDashboardJS": {
    "Gateways": "Gateways",
    "NoDataAvailable": "No data available.",
    "NeverSeen": "Never seen",
    "NeverSeenOnline": "Never seen online",
    "Inactive": "Inactive",
    "Active": "Active",
    "ActiveDevices": "Active devices",
    "ActiveGateways": "Active gateways",
    "DR": "DR",
    "DeviceDataRateUsage": "Device data-rate usage"
  },
  "OrganizationFormJS": {
    "nameLabel": "Organization name",
    "nameHelper": "The name may only contain words, numbers and dashes.",
    "displayNameLabel": "Display name",
    "Gateways": "Gateways",
    "OrganizationCanHaveGateways": "Organization can have gateways",
    "OrganizationCanHaveGatewaysHelper": "When checked, it means that organization administrators are able to add their own gateways to the network. Note that the usage of the gateways is not limited to this organization.",
    "maxGatewayCountLabel": "Max. number of gateways",
    "maxGatewayCountHelper": "The maximum number of gateways that can be added to this organization (0 = unlimited).",
    "Devices": "Devices",
    "maxDeviceCountLabel": "Max. number of devices",
    "maxDeviceCountHelper": "The maximum number of devices that can be added to this organization (0 = unlimited)."
  },
  "OrganizationLayoutJS": {
    "DeleteConfirmation": "Are you sure you want to delete this organization?",
    "Delete": "Delete",
    "Organizations": "Organizations",
    "Dashboard": "Dashboard",
    "Configuration": "Configuration"
  },
  "OrganizationUserFormJS": {
    "Email": "Email",
    "PermissionsHelper": "An user without additional permissions will be able to see all resources under this organization and will be able to send and receive device payloads.",
    "UserIsOrganizationAdmin": "User is organization admin",
    "OrganizationAdminHelper": "An organization admin user is able to add and modify resources part of the organization.",
    "UserIsDeviceAdmin": "User is device admin",
    "DeviceAdminHelper": "A device admin user is able to add and modify resources part of the organization that are related to devices.",
    "UserIsGatewayAdmin": "User is gateway admin",
    "GatewayAdminHelper": "A gateway admin user is able to add and modify gateways part of the organization."
  },
  "OrganizationUserLayoutJS": {
    "DeleteConfirmation": "Are you sure you want to remove this organization user (this does not remove the user itself)?",
    "GotoUser": "Goto user",
    "Delete": "Delete",
    "OrganizationUsers": "Organization users"
  },
  "UpdateOrganizationJS": {
    "UpdateOrganization": "Update organization"
  },
  "UpdateOrganizationUserJS": {
    "UpdateUser": "Update user"
  },
  "ApplicationFormJS": {
    "None": "None",
    "CayenneLPP": "Cayenne LPP",
    "CustomJS": "Custom JavaScript codec functions",
    "nameLabel": "Application name",
    "nameHelper": "The name may only contain words, numbers and dashes.",
    "descriptionLabel": "Application description",
    "ServiceProfile": "Service-profile",
    "SelectServiceProfile": "Select service-profile",
    "SelectServiceProfileHelper": "The service-profile to which this application will be attached. Note that you can't change this value after the application has been created.",
    "PayloadCodec": "Payload codec",
    "SelectPayloadCodec": "Select payload codec",
    "SelectPayloadCodecHelper1": "By defining a payload codec, ChirpStack Application Server can encode and decode the binary device payload for you.",
    "ImportantNote": "Important note",
    "SelectPayloadCodecHelper2": "the payload fields have moved to the device-profile. For backward-compatibility and migration, existing codec settings are still visible. Codec settings on the device-profile have priority over the application codec settings.",
    "FMustHave": "The function must have the signature ",
    "DecodeMustReturn": "and must return an object. ChirpStack Application Server will convert this object to JSON.",
    "EncodeMustReturn": "and must return an array of bytes.",
    "PayloadCodecNote": "Note: The payload codec fields have moved to the device-profile."
  },
  "ApplicationLayoutJS": {
    "DeleteConfirmation": "Are you sure you want to delete this application? This will also delete all devices part of this application.",
    "Delete": "Delete",
    "Applications": "Applications",
    "Devices": "Devices",
    "MulticastGroups": "Multicast groups",
    "ApplicationConfiguration": "Application configuration",
    "Integrations": "Integrations"
  },
  "CreateApplicationJS": {
    "DialogTitle": "Add a service-profile?",
    "CreateServiceProfile": "Create service-profile",
    "Dismiss": "Dismiss",
    "Applications": "Applications",
    "Create": "Create",
    "CreateApplication": "Create application"
  },
  "ListApplicationsJS": {
    "Create": "Create",
    "Applications": "Applications",
    "ID": "ID",
    "Name": "Name",
    "ServiceProfile": "Service-profile",
    "Description": "Description"
  },
  "UpdateApplicationJS": {
    "UpdateApplication": "Update application"
  },
  "AWSSNSCardJS": {
    "DeleteConfirmation": "Are you sure you want to remove the AWS SNS integration?",
    "AWS_SNS": "AWS SNS",
    "AWS_SNS_HELPER": "The AWS SNS integration forwards events to an AWS SNS topic.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "AWSSNSIntegrationFormJS": {
    "JSON": "JSON",
    "ProtocolBuffers": "Protocol Buffers",
    "JSONLegacy": "JSON (legacy, will be deprecated)",
    "PayloadMarshaler": "Payload marshaler",
    "marshalerLabel": "Select payload marshaler",
    "marshalerHelper": "This defines how the payload will be encoded.",
    "regionLabel": "AWS region",
    "accessKeyIDLabel": "AWS Access Key ID",
    "secretAccessKeyLabel": "AWS Secret Access Key",
    "topicARNLabel": "AWS SNS topic ARN"
  },
  "AzureServiceBusCardJS": {
    "DeleteConfirmation": "Are you sure you want to remove the Azure Service-Bus integration?",
    "AzureServiceBus": "Azure Service-Bus",
    "Description": "The Azure Service-Bus integration forwards events to an Azure Service-Bus topic or queue.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "AzureServiceBusIntegrationFormJS": {
    "JSON": "JSON",
    "ProtocolBuffers": "Protocol Buffers",
    "JSONLegacy": "JSON (legacy, will be deprecated)",
    "PayloadMarshaler": "Payload marshaler",
    "marshalerLabel": "Select payload marshaler",
    "marshalerHelper": "This defines how the payload will be encoded.",
    "connectionStringLabel": "Azure Service-Bus connection string",
    "connectionStringHelper": "This string can be obtained after creating a 'Shared access policy' with 'Send' permission.",
    "publishNameLabel": "Azure Service-Bus topic / queue name"
  },
  "CreateAWSSNSIntegrationJS": {
    "Add_AWS_SNS_integration": "Add AWS SNS integration",
    "Add_integration": "Add integration"
  },
  "CreateAzureServiceBusIntegrationJS": {
    "Add_Azure_Service_Bus_integration": "Add Azure Service-Bus integration",
    "Add_integration": "Add integration"
  },
  "CreateGCPPubSubIntegrationJS": {
    "Add_GCP_Pub_Sub_integration": "Add GCP Pub/Sub integration",
    "Add_integration": "Add integration"
  },
  "CreateHTTPIntegrationJS": {
    "Add_HTTP_integration": "Add HTTP integration",
    "Add_integration": "Add integration"
  },
  "CreateInfluxDBIntegrationJS": {
    "Add_InfluxDB_integration": "Add InfluxDB integration",
    "Add_integration": "Add integration"
  },
  "CreateLoRaCloudIntegrationJS": {
    "Add_Semtech_LoRa_Cloud_integration": "Add Semtech LoRa Cloud_integration",
    "Add_integration": "Add integration"
  },
  "CreateMyDevicesIntegrationJS": {
    "Title": "Add MyDevices integration",
    "Add_integration": "Add integration"
  },
  "CreatePilotThingsIntegrationJS": {
    "Title": "Add Pilot Things integration",
    "Add_integration": "Add integration"
  },
  "CreateThingsBoardIntegrationJS": {
    "Title": "Add ThingsBoard integration",
    "Add_integration": "Add integration"
  },
  "GCPPubSubCardJS": {
    "DeleteConfirmation": "Are you sure you want to remove the GCP Pub/Sub integration?",
    "Title": "GCP Pub/Sub",
    "Description": "The GCP Pub/Sub integration forwards events to a GCP Pub/Sub topic.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "GCPPubSubIntegrationFormJS": {
    "JSON": "JSON",
    "ProtocolBuffers": "Protocol Buffers",
    "JSONLegacy": "JSON (legacy, will be deprecated)",
    "PayloadMarshaler": "Payload marshaler",
    "marshalerLabel": "Select payload marshaler",
    "marshalerHelper": "This defines how the payload will be encoded.",
    "projectIDLabel": "GCP project ID",
    "topicNameLabel": "GCP Pub/Sub topic name",
    "credentialsFileLabel": "GCP service-account credentials file",
    "credentialsFileHelper": "Under IAM create a Service account with 'Pub/Sub Publisher' role, then put the content of the JSON key in this field."
  },
  "HTTPJS": {
    "DeleteConfirmation": "Are you sure you want to remove the HTTP integration?",
    "Title": "HTTP",
    "Description": "The HTTP integration forwards events to a user-configurable endpoint as POST requests.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "HTTPIntegrationFormJS": {
    "HeaderName": "Header name",
    "HeaderValue": "Header value",
    "JSON": "JSON",
    "ProtocolBuffers": "Protocol Buffers",
    "JSONLegacy": "JSON (legacy, will be deprecated)",
    "PayloadMarshaler": "Payload marshaler",
    "marshalerLabel": "Select payload marshaler",
    "marshalerHelper": "This defines how the payload will be encoded.",
    "Headers": "Headers",
    "AddHeader": "Add header",
    "Endpoints": "Endpoints",
    "eventEndpointURLLabel": "Endpoint URL(s) for events",
    "eventEndpointURLHelper": "ChirpStack will make a POST request to this URL(s) with 'event' as query parameter. Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed.",
    "uplinkDataURLLabel": "Uplink data URL(s)",
    "uplinkDataURLHelper": "Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed.",
    "joinNotificationURLLabel": "Join notification URL(s)",
    "joinNotificationURLHelper": "Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed.",
    "statusNotificationURLLabel": "Device-status notification URL(s)",
    "statusNotificationURLHelper": "Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed.",
    "locationNotificationURLLabel": "Location notification URL(s)",
    "locationNotificationURLHelper": "Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed.",
    "ackNotificationURLLabel": "ACK notification URL(s)",
    "ackNotificationURLHelper": "Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed.",
    "txAckNotificationURLLabel": "TX ACK notification URL(s)",
    "txAckNotificationURLHelper": "This notification is sent when the downlink was acknowledged by the LoRa gateway for transmission. Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed.",
    "integrationNotificationURLLabel": "Integration notification URL(s)",
    "integrationNotificationURLHelper": "This notification can by sent by configured integrations to send custom payloads. Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed.",
    "errorNotificationURLLabel": "Error notification URL(s)",
    "errorNotificationURLHelper": "Multiple URLs can be defined as a comma separated list. Whitespace will be automatically removed."
  },
  "InfluxDBCardJS": {
    "DeleteConfirmation": "Are you sure you want to remove the InfluxDB integration?",
    "Title": "InfluxDB",
    "Description": "The InfluxDB integration writes events into an InfluxDB time-series database.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "InfluxDBIntegrationFormJS": {
    "Nanosecond": "Nanosecond",
    "Microsecond": "Microsecond",
    "Millisecond": "Millisecond",
    "Second": "Second",
    "Minute": "Minute",
    "Hour": "Hour",
    "InfluxDBVersion": "InfluxDB version",
    "SelectInfluxDBVersion": "Select InfluxDB version",
    "endpointLabel": "API endpoint (write)",
    "usernameLabel": "Username",
    "passwordLabel": "Password",
    "dbName": "Database name",
    "retentionPolicyNameLabel": "Retention policy name",
    "retentionPolicyNameHelper": "Sets the target retention policy for the write. InfluxDB writes to the DEFAULT retention policy if you do not specify a retention policy.",
    "TimestampPrecision": "Timestamp precision",
    "precisionLabel": "Select timestamp precision",
    "precisionHelper": "It is recommented to use the least precise precision possible as this can result in significant improvements in compression.",
    "organizationLabel": "Organization",
    "bucketLabel": "Bucket",
    "tokenLabel": "Token"
  },
  "LoRaCloudCardJS": {
    "DeleteConfirmation": "Are you sure you want to remove the Semtech LoRa Cloud integration?",
    "Title": "Semtech LoRa Cloud",
    "Description": " The Semtech LoRa Cloud integration provides Modem & Geolocation Services.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "LoRaCloudIntegrationFormJS": {
    "ModemGeolocationServices": "Modem & Geolocation Services",
    "dasTokenLabel": "Token",
    "dasTokenHelper": "This token can be obtained from loracloud.com",
    "ImUsing": "I am using LoRa Edge™ LR1110 or my device uses LoRa Basics™ Modem-E",
    "dasGNSSPortLabel": "GNSS port (FPort)",
    "dasGNSSPortHelper": "ChirpStack Application Server will only forward the FRMPayload for GNSS geolocation to LoRa Cloud when the uplink matches the configured port.",
    "dasModemPortLabel": "Modem port (FPort)",
    "dasModemPortHelper": "ChirpStack Application Server will only forward the FRMPayload to LoRa Cloud when the uplink matches the configured port.",
    "UseReceiveTimestamp": "Use receive timestamp for GNSS geolocation",
    "UseReceiveTimestampHelper": "If enabled, the receive timestamp of the gateway will be used as reference instead of the timestamp included in the GNSS payload.",
    "ImUsing1": "My device adheres to the LoRa Edge™ Tracker Reference Design protocol",
    "ImUsing1Helper": "If enabled, ChirpStack Application Server will try to resolve the location of the device if a geolocation payload is detected.",
    "AdvancedGeolocationOptions": "Advanced geolocation options",
    "geolocationTDOALabel": "TDOA based geolocation",
    "geolocationTDOAHelper": "If enabled, geolocation will be based on time-difference of arrival (TDOA). Please note that this requires gateways that support the fine-timestamp feature.",
    "geolocationRSSILabel": "RSSI based geolocation",
    "geolocationRSSIHelper": "If enabled, geolocation will be based on RSSI values reported by the receiving gateways.",
    "geolocationWifiLabel": "Wi-Fi based geolocation",
    "geolocationWifiHelper": "If enabled, geolocation will be based on Wi-Fi access-point data reported by the device.",
    "geolocationGNSSLabel": "GNSS-based geolocation (LR1110)",
    "geolocationGNSSHelper": "If enabled, geolocation will be based on GNSS data reported by the device.",
    "geolocationBufferTTLLabel": "Geolocation buffer TTL (seconds)",
    "geolocationBufferTTLHelper": "The time in seconds that historical uplinks will be stored in the geolocation buffer. Used for TDOA and RSSI geolocation.",
    "geolocationMinBufferSizeLabel": "Geolocation minimum buffer size",
    "geolocationMinBufferSizeHelper": "The minimum buffer size required before using geolocation. Using multiple uplinks for geolocation can increase the accuracy of the geolocation results. Used for TDOA and RSSI geolocation.",
    "wifiPayloadFieldLabel": "Wifi payload field",
    "wifiPayloadFieldHelper": "This must match the name of the field in the decoded payload which holds array of Wifi access-points. Each element in the array must contain two keys: 1) macAddress: array of 6 bytes, 2) signalStrength: RSSI of the access-point.",
    "GNSSPayloadFieldLabel": "GNSS payload field",
    "GNSSPayloadFieldHelper": "This must match the name of the field in the decoded payload which holds the LR1110 GNSS bytes."
  },
  "MQTTCardJS": {
    "Title": "MQTT",
    "Description": "The MQTT integration forwards events to a MQTT broker.",
    "GetCertificate": "Get certificate"
  },
  "MQTTCertificateJS": {
    "Title": "Generate MQTT client certificate",
    "Description": "If required by the network, the MQTT client needs to be configured with a client certificate in order to connect to the MQTT broker to device data. The generated certificate is application specific. After generating the certificate, the certificate can only be retrieved once.",
    "GenerateCertificate": "Generate certificate",
    "expiresAtLabel": "Certificate expires at",
    "expiresAtHelper": "The certificate expires at this date. Make sure to generate and configure a new certificate for your MQTT client before this expiration date.",
    "caCertLabel": "CA certificate",
    "caCertHelper": "The CA certificate is to authenticate the certificate of the server.",
    "tlsCertLabel": "TLS certificate",
    "tlsKeyLabel": "TLS key"
  },
  "MyDevicesCardJS": {
    "DeleteConfirmation": "Are you sure you want to remove the MyDevices integration?",
    "Title": "myDevices",
    "Description": "The myDevices integration forwards events to the myDevices platform.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "MyDevicesIntegrationFormJS": {
    "Cayenne": "Cayenne",
    "IoTBox": "IoT in a Box",
    "CustomEndpointURL": "Custom endpoint URL",
    "Title": "myDevices endpoint",
    "_endpointLabel": "Select myDevices endpoint",
    "Title1": "myDevices integration configuration",
    "endpointLabel": "myDevices API endpoint"
  },
  "PilotThingsCardJS": {
    "Title": "Pilot Things",
    "Description": "The Pilot Things integration forwards messages to a Pilot Things instance.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "PilotThingsIntegrationFormJS": {
    "serverLabel": "Pilot Things server",
    "tokenLabel": "Authentication token"
  },
  "ThingsboardCardJS": {
    "DeleteConfirmation": "Are you sure you want to remove the ThingsBoard integration?",
    "Title": "ThingsBoard.io",
    "Description": "The ThingsBoard integration forwards events to a ThingsBoard.io instance.",
    "Edit": "Edit",
    "Remove": "Remove",
    "Add": "Add"
  },
  "ThingsBoardIntegrationFormJS": {
    "serverLabel": "ThingsBoard.io server",
    "serverHelper": "Each device must have a 'ThingsBoardAccessToken' variable assigned. This access-token is generated by ThingsBoard."
  },
  "UpdateAWSSNSIntegrationJS": {
    "Title": "Update AWS SNS integration",
    "SubmitLabel": "Update integration"
  },
  "UpdateAzureServiceBusIntegrationJS": {
    "Title": "Update Azure Service-Bus integration",
    "SubmitLabel": "Update integration"
  },
  "UpdateGCPPubSubIntegrationJS": {
    "Title": "Update GCP Pub/Sub integration",
    "SubmitLabel": "Update integration"
  },
  "UpdateHTTPIntegrationJS": {
    "Title": "Update HTTP integration",
    "SubmitLabel": "Update integration"
  },
  "UpdateInfluxDBIntegrationJS": {
    "Title": "Update InfluxDB integration",
    "SubmitLabel": "Update integration"
  },
  "UpdateLoRaCloudIntegrationJS": {
    "Title": "Update Semtech LoRa Cloud™ integration",
    "SubmitLabel": "Update integration"
  },
  "UpdateMyDevicesIntegrationJS": {
    "Title": "Update MyDevices integration",
    "SubmitLabel": "Update integration"
  },
  "UpdatePilotThingsIntegrationJS": {
    "Title": "Update Pilot Things integration",
    "SubmitLabel": "Update integration"
  },
  "UpdateThingsBoardIntegrationJS": {
    "Title": "Update ThingsBoard integration",
    "SubmitLabel": "Update integration"
  }
}
